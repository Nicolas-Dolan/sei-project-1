This produces a diagonal line of walls:
if (i % (width - 1) === 0) {
      wallIndices.push(i)
}


This produces a vertical line of walls
function drawVerticalWalls(min, max) {
    let i = min
    for (i = min; i <= max; i += width) {
      wallIndices.push(i)
    }
  }

The old algorithm for pathfinding (it had a tendency to lock the ghost in an infinite loop)
function chooseMove() {
        if (lastDirection === 'right') {
          moveRight()
          if (wayClear === false) {
            const random = Math.floor(Math.random() * (2 - 1 + 1)) + 1
            if (random === 1) {
              moveUp()
              if (wayClear === false) {
                moveDown()
              }
            } else if (random === 2) {
              moveDown()
              if (wayClear === false) {
                moveUp()
              }
            }
          }
          if (wayClear === false) {
            moveLeft()
          }
        } else if (lastDirection === 'left') {
          moveLeft()
          if (wayClear === false) {
            const random = Math.floor(Math.random() * (2 - 1 + 1)) + 1
            if (random === 1) {
              moveUp()
              if (wayClear === false) {
                moveDown()
              }
            } else if (random === 2) {
              moveDown()
              if (wayClear === false) {
                moveUp()
              }
            }
          }
          if (wayClear === false) {
            moveRight()
          }
        } else if (lastDirection === 'up') {
          moveUp()
          if (wayClear === false) {
            const random = Math.floor(Math.random() * (2 - 1 + 1)) + 1
            if (random === 1) {
              moveLeft()
              if (wayClear === false) {
                moveRight()
              }
            } else if (random === 2) {
              moveRight()
              if (wayClear === false) {
                moveLeft()
              }
            }
          }
          if (wayClear === false) {
            moveDown()
          }
        } else if (lastDirection === 'down') {
          moveDown()
          if (wayClear === false) {
            const random = Math.floor(Math.random() * (2 - 1 + 1)) + 1
            if (random === 1) {
              moveLeft()
              if (wayClear === false) {
                moveRight()
              }
            } else if (random === 2) {
              moveRight()
              if (wayClear === false) {
                moveLeft()
              }
            }
          }
          if (wayClear === false) {
            moveUp()
          }
        }
        squares.forEach((square) => {
          if (square.classList.contains(ghost) && square.classList.contains('ghostAny')) {
            square.classList.remove('ghostAny')
          }
        })
        squares.forEach(square => square.classList.remove(ghost))
        squares[ghostIndex[0]].classList.add(ghost)
        squares[ghostIndex[0]].classList.add('ghostAny')
        ghostMoved()
      }

Original player movement controls
squares[playerIndex].classList.add('player')
    function handleKeyDown(e) {
      switch (e.keyCode) {
        case 39:
          if (playerIndex === 161) {
            playerIndex = 144
          } else if (playerIndex % width < width - 1 && !squares[playerIndex + 1].classList.contains('wall')) {
            playerIndex++
          }
          break
        case 37:
          if (playerIndex === 144) {
            playerIndex = 161
          } else if (playerIndex % width > 0 && !squares[playerIndex - 1].classList.contains('wall')) {
            playerIndex--
          }
          break
        case 40:
          if (playerIndex + width < width * width && !squares[playerIndex + width].classList.contains('wall')) {
            playerIndex += width
          }
          break
        case 38:
          if (playerIndex - width >= 0 && !squares[playerIndex - width].classList.contains('wall')) {
            playerIndex -= width
          } 
          break
        default:
          console.log('player shouldnt move')
      }
      squares.forEach(square => square.classList.remove('player'))
      squares[playerIndex].classList.add('player')
      playerMoved()
    // console.log('current player index is' , playerIndex)
    // console.log('score', score)
    }
